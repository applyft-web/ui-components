{"version":3,"file":"components-ReviewsSlider-ReviewsSlider-stories.976d5ccf.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AAAA","sources":["webpack://@applyft-web/ui-components/","webpack://@applyft-web/ui-components/./src/components/ReviewsSlider/ReviewsSlider.tsx"],"sourcesContent":[null,"import React, { type ReactNode, useEffect, useRef, useState } from 'react'\nimport { useTheme } from 'styled-components'\nimport { getFormattedStyles } from '../../utils'\nimport * as S from './styled'\n\n// TODO draggable slider\n\nexport interface ReviewProps {\n  name: string\n  text: string\n  img?: string\n}\n\ninterface CustomStylesProps {\n  readonly container?: string\n  readonly item?: string\n}\n\nexport interface ReviewsSliderProps {\n  reviewsList: ReviewProps[] | ReactNode[]\n  mt?: number | string\n  mb?: number | string\n  interval?: number\n  sideMargin?: number\n  staticMode?: boolean\n  isArabic?: boolean\n  customStyles?: CustomStylesProps | string\n  [propName: string]: any\n}\n\nexport const ReviewsSlider = ({\n  reviewsList,\n  mt,\n  mb,\n  interval = 2,\n  sideMargin,\n  staticMode = false,\n  isArabic,\n  customStyles,\n  ...rest\n}: ReviewsSliderProps) => {\n  const theme = rest?.theme\n  const currentTheme = useTheme()\n  const styles: CustomStylesProps = getFormattedStyles(customStyles, 'container')\n  const sliderInterval = interval * 1000\n  const sliderRef = useRef<HTMLDivElement>(null)\n  const [stopAutoScroll, setStopAutoScroll] = useState(false)\n  const [lastItemAdded, setLastItemAdded] = useState(false)\n  const renderReviews = (r: ReviewProps | ReactNode, index: number) => {\n    const { name, text, img } = r as ReviewProps\n    return (\n      <S.ReviewsItem\n        $staticMode={staticMode}\n        $isArabic={isArabic}\n        theme={theme}\n        $customStyles={styles?.item}\n        $sideMargin={sideMargin}\n        key={index}\n      >\n        { (React.isValidElement(r) || typeof r === 'string')\n          ? r\n          : (\n              <>\n                <S.Reviewer\n                  $image={img}\n                  theme={theme}\n                  $isArabic={isArabic}\n                >\n                  {name || '\\u00A0'}\n                </S.Reviewer>\n                <S.ReviewText theme={theme}>{text}</S.ReviewText>\n              </>\n            )\n        }\n      </S.ReviewsItem>\n    )\n  }\n  const items = reviewsList.map(renderReviews)\n  const touchMoveHandler = (e: React.TouchEvent) => {\n    /*\n    if (staticMode) return;\n\n    e.preventDefault();\n    if (stopAutoScroll) {\n      const slider = sliderRef.current;\n      if (!slider) return;\n      const { clientX } = e.changedTouches[0];\n      const { width } = slider.getBoundingClientRect();\n      const { left } = slider.getBoundingClientRect();\n      const x = clientX - left;\n      const percent = x / width * 100;\n      slider.style.transform = `translateX(calc(-${percent}% - ${percent * APP_SIDE_PADDING}px))`;\n    }\n    */\n  }\n  const touchStartHandler = (e: React.TouchEvent) => {\n    if (staticMode) return\n    setStopAutoScroll(true)\n  }\n  const touchEndHandler = (e: React.TouchEvent) => {\n    if (staticMode) return\n    setStopAutoScroll(false)\n  }\n\n  useEffect(() => {\n    if (staticMode || lastItemAdded) return\n    const slider = sliderRef.current\n    if (slider) {\n      slider.appendChild(slider.children[0].cloneNode(true))\n      setLastItemAdded(true)\n    }\n  }, [staticMode])\n\n  useEffect(() => {\n    if (staticMode) return\n    const slider = sliderRef.current\n    if (!slider) return\n\n    let counter = 0\n\n    const nextSlide = () => {\n      if (stopAutoScroll) return\n      counter++\n      updateSlidePosition()\n    }\n\n    const sliderItem = slider.children[0] as HTMLElement\n    const sliderItemWidth = sliderItem.offsetWidth\n    const sliderItemMargin = sideMargin ?? currentTheme?.sidePadding ?? 16\n\n    const updateSlidePosition = () => {\n      slider.style.cssText = `\n        transform: translateX(calc(-${counter * sliderItemWidth}px - ${counter * sliderItemMargin}px))\n      `\n      if (counter === reviewsList.length) {\n        setTimeout(() => {\n          counter = 0\n          slider.style.cssText = 'transition: none; transform: translateX(0)'\n        }, sliderInterval / 2)\n      }\n    }\n\n    const interval = setInterval(nextSlide, sliderInterval)\n\n    return () => {\n      clearInterval(interval)\n    }\n  }, [staticMode, stopAutoScroll, reviewsList.length, sliderInterval])\n\n  return (\n    <S.ReviewsContainer\n      $mt={mt}\n      $mb={mb}\n      $customStyles={styles?.container}\n      $staticMode={staticMode}\n      {...rest}\n    >\n      {staticMode\n        ? items\n        : (\n            <S.ReviewsBlock\n              ref={sliderRef}\n              id={'slider'}\n              onTouchStart={touchStartHandler}\n              onTouchMove={touchMoveHandler}\n              onTouchEnd={touchEndHandler}\n              theme={theme}\n            >\n              {items}\n            </S.ReviewsBlock>\n          )\n      }\n    </S.ReviewsContainer>\n  )\n}\n"],"names":[],"sourceRoot":""}