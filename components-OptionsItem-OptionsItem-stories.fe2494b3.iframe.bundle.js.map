{"version":3,"file":"components-OptionsItem-OptionsItem-stories.fe2494b3.iframe.bundle.js","mappings":";AAgHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9EA;AAAA;AAAA","sources":["webpack://@applyft-web/ui-components/","webpack://@applyft-web/ui-components/./src/components/OptionsItem/styled.ts"],"sourcesContent":[null,"import styled, { css } from 'styled-components';\nimport { getTextAlign, getCssSize } from '../../utils';\n\ninterface CommonProps {\n  $customStyles?: string;\n}\n\nexport interface CustomStylesWithStatesProps {\n  readonly default?: string;\n  readonly disabled?: string;\n  readonly hover?: string;\n  readonly active?: string;\n}\n\nexport type SizeProps = [number | string, number | string];\n\ninterface StyledProps {\n  readonly $isArabic?: boolean;\n  readonly $isActive?: boolean;\n}\n\ninterface StyledOptionProps extends StyledProps {\n  readonly $multiChoice?: boolean;\n  readonly $mt?: number | string,\n  readonly $mb?: number | string,\n  readonly $customStyles?: CustomStylesWithStatesProps;\n}\n\ninterface StyledImgProps extends StyledProps {\n  readonly $imgSrc?: string;\n  readonly $size?: SizeProps;\n}\n\nexport const StyledOption = styled.button<StyledOptionProps>(\n  ({ theme, $isArabic = theme.isArabic, $isActive, $multiChoice, $mt, $mb, $customStyles }) => css`\n    display: flex;\n    flex-direction: ${($isArabic) ? 'row-reverse' : 'row'};\n    align-items: center;\n    width: 100%;\n    max-width: ${theme?.maxContentWidth}px;\n    border-radius: 12px;\n    font-size: 16px;\n    line-height: 1.5;\n    color: ${theme?.colors?.text};\n    text-align: ${getTextAlign($isArabic)};\n    position: relative;\n    transition: .3s;\n    cursor: pointer;\n    padding: 16px;\n    margin-left: auto;\n    margin-right: auto;\n    ${$multiChoice && `\n      padding: 16px 56px;\n      padding-${getTextAlign($isArabic)}: 16px;\n    `};\n    background-color: ${theme?.colors?.[`option${$isActive ? 'A' : 'Ina'}ctive`]};\n    border: 1px solid ${theme?.colors?.[`optionBorder${$isActive ? 'A' : 'Ina'}ctive`]};\n    color: ${theme?.colors?.[$isActive ? 'optionActiveText' : 'text']};\n    ${$mt !== undefined && `margin-top: ${getCssSize($mt)}`};\n    ${$mb !== undefined && `margin-bottom: ${getCssSize($mb)}`};\n  \n    &:first-child {\n      margin-top: 0;\n    }\n  \n    &:focus {\n      outline: none;\n    }\n\n    ${$customStyles?.default};\n    \n    &:disabled {\n      ${$customStyles?.disabled};\n    }\n    \n    &:active {\n      ${$customStyles?.active};\n    }\n  \n    @media screen and (min-width: ${theme?.desktopMinWidth}px ) and (hover: hover) {\n      &:hover {\n        background-color: ${theme?.colors?.optionActive};\n        border-color: ${theme?.colors?.optionBorderActive};\n        color: ${theme?.colors?.optionActiveText};\n\n        .check-element {\n          background-color: ${theme?.colors?.optionCheckActive};\n\n          path {\n            fill: ${theme?.colors?.optionActive};\n          }\n        }\n\n        .option-img {\n          background-color: ${theme?.colors?.optionImgActive};\n        }\n\n        ${$customStyles?.hover};\n      }\n    }\n  `\n);\n\nexport const StyledImg = styled.div<StyledImgProps & CommonProps>(\n  ({ theme, $isArabic = theme.isArabic, $isActive, $size, $imgSrc, $customStyles }) => css`\n    width: ${getCssSize($size?.[0] || 64)};\n    height: ${getCssSize($size?.[1] || 64)};\n    border-radius: 7px;\n    background-color: ${theme?.colors?.[`optionImg${$isActive ? 'Active' : 'Inactive'}`]};\n    ${$imgSrc && css`\n      background-image: url(${$imgSrc});\n      background-size: cover;\n      background-position: center;\n      background-repeat: no-repeat;\n    `};\n    margin: 0 16px;\n    margin-${getTextAlign($isArabic)}: 0;\n    position: relative;\n    transition: background-color .3s;\n  \n    ${$customStyles};\n  `\n);\n\nexport const StyledCheckIcon = styled.div<StyledProps & CommonProps>(\n  ({ theme, $isArabic = theme.isArabic, $isActive, $customStyles }) => css`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 20px;\n    height: 20px;\n    border-radius: 50%;\n    background-color: ${theme?.colors?.[`optionCheck${$isActive ? 'Active' : 'Inactive'}`]};\n    position: absolute;\n    top: 50%;\n    left: 16px;\n    right: 16px;\n    ${getTextAlign($isArabic)}: auto;\n    transform: translateY(-50%);\n    transition: background-color .3s;\n\n    ${$customStyles};\n  `\n);\n\nexport const ThreeDots = styled.div<CommonProps & { $size?: SizeProps }>(\n  ({ theme, $customStyles, $size }) => css`\n    width: 8px;\n    height: 8px;\n    border-radius: 50%;\n    background-color: ${theme?.colors?.threeDots};\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    zoom: calc(${$size?.[0] || 64}/64);\n\n    &:before, &:after {\n      content: '';\n      display: block;\n      width: 100%;\n      height: 100%;\n      border-radius: inherit;\n      background-color: inherit;\n      position: absolute;\n      top: 0;\n      right: 12px;\n    }\n    \n    &:before {\n      right: -12px;\n    }\n  \n    ${$customStyles};\n  `\n);\n"],"names":[],"sourceRoot":""}